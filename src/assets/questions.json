{
"questions": [{
    "index": "1",
    "des": "给定个不同的整数以及一棵结构已经确定的有个 节点的二叉树， 现在需要将这些整数填充到这个二叉树的节点上， 请问有多少种填充方式使得填充后的二叉树是一棵二叉查找树？",
    "options": {
        "A": "0",
        "B": "1",
        "C": "3",
        "D": "2"
    },
    "rightAnswer": ["A"],
    "type": "1"
},
{
    "index": "2",
    "des": "进栈序列为 abcde， 进栈后随时可以出栈， 下面哪种出栈结果不可能发生 ",
    "options": {
        "A": "abcde",
        "B": "dceab",
        "C": "bdcae",
        "D": "decba"
    },
    "rightAnswer": ["B"],
    "type": "1"
},
{
    "index": "3",
    "des": "以下哪个排序算法对单向链表排序时间复杂度最低？",
    "options": {
        "A": "插入排序",
        "B": "堆排序",
        "C": "快速排序",
        "D": "归并排序"
    },
    "rightAnswer": ["C"],
    "type": "1"
},
{
    "index": "4",
    "des": "下面关于进程和线程的关系不正确的是",
    "options": {
        "A": "父进程创建的线程不能与子进程创建的线程共享内存",
        "B": "线程的执行顺序跟线程的创建顺序一致",
        "C": "杀死子进程时，父进程也会被杀掉",
        "D": "杀死父进程时，子进程也会被杀掉"
    },
    "rightAnswer": ["D"],
    "type": "1"
},
{
    "index": "5",
    "des": "文本编辑器的 undo/redo 可以用哪种数据结构实现？",
    "options": {
        "A": "栈",
        "B": "队列",
        "C": "树",
        "D": "图"
    },
    "rightAnswer": ["A", "D"],
    "type": "2"
},
{
    "index": "6",
    "des": "下面说法正确的是",
    "options": {
        "A": "RESTful接口中，利用HTTP协议的method字段来描述要对资源操作的方式，比如GET表示获取资源，POST表示更新一个资源，PUT表示新建资源,DELETE 表示删除资源。",
        "B": "HTTPS协议使用对称加密",
        "C": "HTTP是无状态协议",
        "D": "HTTPS默认使用80端口"
    },
    "rightAnswer": ["C", "D"],
    "type": "2"
},
{
    "index": "7",
    "des": " Alice 使用公开密钥加密算法给 Bob 发送了一条加密信息，以下描述哪些是对的？",
    "options": {
        "A": "Alice使用Bob的公钥对信息做了加密",
        "B": "Alice使用自己的公钥对信息做了加密",
        "C": "Bob使用自己的公钥解密信息",
        "D": "Bob使用Alice的公钥解密信息"
    },
    "rightAnswer": ["C", "D"],
    "type": "2"
},
{
    "index": "8",
    "des": "  请设计一个数据结构来实现下面这些方法，所有方法都使用同一个数据结构实现，这个数据结构必须尽可能让使用频率高的方法效率高，请详细说明如何用所选的数据结构实现每个方法，并给出每个方法的时间复杂度。 1. findMin() : 返回最小的元素使用频率：非常高2. findMax() : 返回最大的元素使用频率：非常高  3. deleteMin() : 删除最小的元素使用频率：较高  4. deleteMax() : 删除最大的元素使用频率：较高 5. insert() : 插入一个元素使用频率：低        6. delete() : 删除一个元素使用频率：低",
    "options": {},
    "rightAnswer": [],
    "type": "3"
}, 
{
    "index": "9",
    "des": "  请设计一个数据结构来实现下面这些方法，所有方法都使用同一个数据结构实现，这个数据结构必须尽可能让使用频率高的方法效率高，请详细说明如何用所选的数据结构实现每个方法，并给出每个方法的时间复杂度。 1. findMin() : 返回最小的元素使用频率：非常高2. findMax() : 返回最大的元素使用频率：非常高  3. deleteMin() : 删除最小的元素使用频率：较高  4. deleteMax() : 删除最大的元素使用频率：较高 5. insert() : 插入一个元素使用频率：低        6. delete() : 删除一个元素使用频率：低",
    "options": {},
    "rightAnswer": [],
    "type": "3"
}
]
}